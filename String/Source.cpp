#include <iostream>

using namespace std;

int main()
{

	char arr[5] = { 'H', 'e', 'l', 'l', 'o' };
	// Символьный массив, но не строка!

	char str[6] = { 'H', 'e', 'l', 'l', 'o', '\0' };
	// Нуль-терминированная строка - это набор символов, 
	// заканчивающийся символом '\0'.

	// Строковая константа - это последовательность из нуля или более символов, заключенных в 
	// кавычки. Кавычки не являются частью строковой константы, а служат только для ее ограничения.
	// Варианты инициализации строк.

	char str2[] = { 'H', 'e', 'l', 'l', 'o', '\0' };
	char str3[6] = "Hello";
	char str4[] = "Hello";


	// Если попытаться вывести указатель на массив типа char через команду cout, то будет на экране 
	// не адрес, который содержится в указателе, а последовательность символов, на которую он 
	// указывает, до завершающего символа '\0'.
	cout << "str: " << str << endl;

	// Для ввода строки используется команда cin.
	char str5[20] = {};

	cout << "\nEnter string (19 characters max): ";
	cin >> str5;
	// cin не может считать строку с пробелами. При попытке это сделать, строка будет обрезана до 
	// первого пробела, т.е. cin всегда читает строку до первого пробела
	cout << "str5: " << str5 << endl;
	if (cin.peek() == '\n')
		cin.get(); // "Забираем" enter из входного буфера

	// Для того, чтобы считать строку с пробелами необходимо использовать следующую команду.
	char str6[20] = "";
	cout << "Enter string (19 characters max): ";
	cin.getline(str6, 20);
	cout << "str6: " << str6 << endl;

	// Все строковые литералы, которые имеются в программе, заносятся компилятором в специальную таблицу строк.
	// Каждая строка этой таблицы имеет свой адрес в оперативной памяти, и благодаря этому для работы со строками 
	// существует возможность использовать указатели на char.
	const char* p = "Hello"; // указатель на строку
	cout << p << endl;
	cout << p[1] << endl;
	// p[0] = 'h'; // ошибка этапа компиляции
	cout << "Hello"[3] << endl;
	cout << 3["Hello"] << endl;
	p = "C++";
	cout << "String: " << p << endl << "Address: " << (unsigned int)p << endl;

	return 0;
}